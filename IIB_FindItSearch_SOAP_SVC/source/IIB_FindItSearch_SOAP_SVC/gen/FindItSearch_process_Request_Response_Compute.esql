BROKER SCHEMA gen
DECLARE ns1 NAMESPACE 'http://xmlns.saksinc.com/CommonModules/LookupFindIt/Types';
DECLARE ns NAMESPACE 'http://xmlns.saksinc.com/CommonModules/LookupFindIt';
DECLARE ns5 NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';


CREATE COMPUTE MODULE FindItSearch_process_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DECLARE p_RestXML,p_Chain,p_CountryCode,p_DeptNo,p_ClassNo,p_SSN,p_VendorStyle,p_MFGName,p_MFGNo,
			p_UdaID,p_UdaValue,p_GMM,p_DMM,p_RowStart,p_RowEnd CHARACTER;
	
		SET p_RestXML 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:RestXML;
		SET p_Chain	  		= InputRoot.XMLNSC.ns:FindItRequest.ns1:Chain;
		SET p_CountryCode 	= InputRoot.XMLNSC.ns:FindItRequest.ns1:CountryCode;
		SET p_DeptNo 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:DeptNo;
		SET p_ClassNo		= InputRoot.XMLNSC.ns:FindItRequest.ns1:ClassNo;
		SET p_SSN 			= InputRoot.XMLNSC.ns:FindItRequest.ns1:SSN;
		SET p_VendorStyle 	= InputRoot.XMLNSC.ns:FindItRequest.ns1:VendorStyle;
		SET p_MFGName 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:MFGName;
		SET p_MFGNo 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:MFGNo;
		SET p_UdaID 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:UdaID;
		SET p_UdaValue 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:UdaValue;
		SET p_GMM 			= InputRoot.XMLNSC.ns:FindItRequest.ns1:GMM;
		SET p_DMM 			= InputRoot.XMLNSC.ns:FindItRequest.ns1:DMM;
		SET p_RowStart 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:RowStart;
		SET p_RowEnd 		= InputRoot.XMLNSC.ns:FindItRequest.ns1:RowEnd;
		
		DECLARE ERROR_RowStart_ID 					CONSTANT CHARACTER 	'1000';
		DECLARE ERROR_RowStart_MSG 					CONSTANT CHARACTER 	'Input RowStart element is not provided';  
		DECLARE ERROR_RowEnd_ID 					CONSTANT CHARACTER 	'1001';
		DECLARE ERROR_RowEnd_MSG 					CONSTANT CHARACTER 	'Input RowEnd element is not provided';  
		DECLARE errorMsg            CHARACTER;
			-- Create the request if the p_RestXML is populated
		IF (TRIM(p_RowStart) IS NULL OR TRIM(p_RowStart) ='' ) THEN
			-- set the ERROR_base64Data_ID and ERROR_base64Data_Msg
			SET Environment.variables.ERROR_msg_ID  = ERROR_RowStart_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_RowStart_MSG;
			SET errorMsg =  ERROR_RowStart_MSG;
		    THROW USER EXCEPTION CATALOG 'IIB_FindItSearchDataValidation' MESSAGE 1000 VALUES(errorMsg) ;
		END IF;
		
				-- Create the request if the p_CountryCode is populated
		IF (TRIM(p_RowEnd) IS NULL OR TRIM(p_RowEnd) ='' ) THEN
			-- set the ERROR_base64Data_ID and ERROR_base64Data_Msg
			SET Environment.variables.ERROR_msg_ID  = ERROR_RowEnd_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_RowEnd_MSG;
			SET errorMsg =  ERROR_RowEnd_MSG;
		    THROW USER EXCEPTION CATALOG 'IIB_FindItSearchDataValidation' MESSAGE 1001 VALUES(errorMsg) ;
		END IF;
		
		
		
		-- store p_UdaID and p_UdaValue in environment variables
		SET Environment.variables.p_RestXML     = p_RestXML;
		SET Environment.variables.p_Chain 		= p_Chain;
		SET Environment.variables.p_CountryCode = p_CountryCode;
		SET Environment.variables.p_DeptNo   	= p_DeptNo;
		
		SET Environment.variables.p_ClassNo     = p_ClassNo;
		SET Environment.variables.p_SSN 		= p_SSN;
		SET Environment.variables.p_VendorStyle = p_VendorStyle;
		SET Environment.variables.p_MFGName   	= p_MFGName;
		SET Environment.variables.p_MFGNo    	= p_MFGNo;
		SET Environment.variables.p_UdaID 		= p_UdaID;
		SET Environment.variables.p_UdaValue 	= p_UdaValue;
		SET Environment.variables.p_GMM   		= p_GMM;
		SET Environment.variables.p_DMM    		= p_DMM;
		SET Environment.variables.p_RowStart 	= p_RowStart;
		SET Environment.variables.p_RowEnd 		= p_RowEnd;
	
		
	END;
END MODULE;
CREATE COMPUTE MODULE validate_udaId_UdaVal_process_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	
	
	-- verify if udaId and udaVal are not empty
	DECLARE sqlQuerry,p_RowStart,p_RowEnd,p_CountryCode,p_VendorStyle,p_Chain CHARACTER;
		
		SET p_Chain 	  = Environment.variables.p_Chain  ;
		SET p_RowStart    = Environment.variables.p_RowStart ;
		SET p_RowEnd      = Environment.variables.p_RowEnd   ;
		SET p_CountryCode = Environment.variables.p_CountryCode ;
		SET p_VendorStyle = Environment.variables.p_VendorStyle ;
	IF (TRIM(Environment.variables.p_UdaID) IS  NOT NULL OR TRIM(Environment.variables.p_UdaID) <>'' ) and 
		(TRIM(Environment.variables.p_UdaValue) IS NOT NULL OR TRIM(Environment.variables.p_UdaValue) <>'' )THEN
		SET sqlQuerry = 'SELECT /*+ NO_CPU_COSTING */ * FROM ( SELECT VENDOR_STYLE_20CH AS VENDOR_STYLE, ROW_NUMBER() OVER (ORDER BY VENDOR_STYLE_20CH) AS row_num, COUNT(*) over () totalRows, SSN, SVS, 
		DEPT_NO, DEPT_DESC, CLASS_NO, CLASS_DESC, MFG_NAME, ITEM_DESC_LONG, MFG_NO, GMM_NO, 
		DMM_NO, UDA_ID, UDA_DESC, UDA_Value, UDA_Value_DESC FROM ( SELECT DISTINCT A.VENDOR_STYLE_20CH, A.SSN, A.SVS, A.DEPT_NO, D.DEPT_DESC, A.CLASS_NO, E.CLASS_DESC, C.MFG_NAME, A.ITEM_DESC_LONG, 
		A.MFG_NO, G.GMM_NO, G.DMM_NO, H.UDA_ID, J.UDA_DESC, I.UDA_Value, I.UDA_Value_DESC FROM RF_ITEM A, RF_DEPARTMENT D, V_RF_UPC F, V_RF_MERCHANT_ORG G, RF_DEPT_MFG C, RF_DEPT_CLASS E, 
		RF_UDA_ITEM_LOV H, RF_UDA J, RF_UDA_VALUES I WHERE D.CHAIN = ? AND F.MDSE_COUNTRY_CODE = ? AND A.VENDOR_STYLE_20CH LIKE ? AND  A.CLASS_NO != 71 AND A.SKN_NO = F.SKN_NO AND F.CHAIN = G.CHAIN AND 
		A.DEPT_NO = D.DEPT_NO AND D.DEPT_NO = G.DEPT_NO AND A.DEPT_NO = C.DEPT_NO AND A.MFG_NO = C.MFG_NO AND A.DEPT_NO = E.DEPT_NO AND
		 A.CLASS_NO = E.CLASS_NO AND A.SKN_NO = H.SKN_NO AND H.UDA_ID = J.UDA_ID AND H.UDA_ID = I.UDA_ID AND H.UDA_Value = I.UDA_Value ) )WHERE  ROW_NUM >= ? AND ROW_NUM <= ? ORDER BY ROW_NUM ASC';
		SET OutputRoot.XML.Query.Result[] = PASSTHRU(sqlQuerry,p_Chain,p_CountryCode,p_VendorStyle,p_RowStart,p_RowEnd);
--		SET OutputRoot.XMLNS.ns:FindItResponse.ns:result.ROW[] = PASSTHRU(sqlQuerry,p_Chain,p_CountryCode,p_VendorStyle,p_RowStart,p_RowEnd);
	Else
		SET sqlQuerry = 'SELECT /*+ NO_CPU_COSTING */ * FROM ( SELECT VENDOR_STYLE_20CH AS VENDOR_STYLE, ROW_NUMBER() OVER (ORDER BY VENDOR_STYLE_20CH) AS row_num, COUNT(*) over () totalRows, SSN, SVS, DEPT_NO, DEPT_DESC, CLASS_NO, 
		CLASS_DESC, MFG_NAME, ITEM_DESC_LONG, MFG_NO, GMM_NO, DMM_NO FROM ( SELECT DISTINCT A.VENDOR_STYLE_20CH, A.SSN, A.SVS, A.DEPT_NO, D.DEPT_DESC, A.CLASS_NO, E.CLASS_DESC, C.MFG_NAME, A.ITEM_DESC_LONG, A.MFG_NO, G.GMM_NO, G.DMM_NO FROM RF_ITEM A, 
		RF_DEPARTMENT D, V_RF_UPC F, V_RF_MERCHANT_ORG G, RF_DEPT_MFG C, RF_DEPT_CLASS E WHERE D.CHAIN = ? AND F.MDSE_COUNTRY_CODE = ? AND A.VENDOR_STYLE_20CH LIKE ? AND  A.CLASS_NO  != 71 AND A.DEPT_NO = D.DEPT_NO AND A.SKN_NO = F.SKN_NO AND D.DEPT_NO = G.DEPT_NO AND A.DEPT_NO = C.DEPT_NO AND A.MFG_NO = C.MFG_NO AND A.DEPT_NO = E.DEPT_NO AND A.CLASS_NO = E.CLASS_NO ) )WHERE ROW_NUM >= ? AND ROW_NUM <= ? ORDER BY ROW_NUM ASC';
		SET OutputRoot.XML.Query.Result[] = PASSTHRU(sqlQuerry,p_Chain,p_CountryCode,p_VendorStyle,p_RowStart,p_RowEnd);
--		SET OutputRoot.XMLNS.ns:FindItResponse.ns:result.ROW[]  = PASSTHRU(sqlQuerry,p_Chain,p_CountryCode,p_VendorStyle,p_RowStart,p_RowEnd);
		
	END IF;
		-- looping through the number of retruned results
		DECLARE j INTEGER 1; 
		DECLARE countmsg INTEGER CARDINALITY(OutputRoot.XML.Query.Result[]); 
		WHILE (j <= countmsg) do 
			SET OutputRoot.XMLNS.ns:FindItResponse.ns:result.ROW[j] = OutputRoot.XML.Query.Result[j];
			SET OutputRoot.XMLNS.ns:FindItResponse.ns:result.ROW[j].(XMLNSC.Field)num = j;
			
			SET j = j + 1;
		END WHILE;
	
	END;
END MODULE;

CREATE COMPUTE MODULE IIB_FindItSearchInputCatchHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
CREATE COMPUTE MODULE IIB_FindItSearchInputHTTPTimeoutHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE IIB_FindItSearchInputFailureHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE pException 			REFERENCE TO InputExceptionList;
		DECLARE messageNumber INTEGER ;
		DECLARE messageText CHARACTER;
		DECLARE UserGenErrorMsg		CONSTANT CHARACTER 	'User generated exception';
		
		SET  messageNumber = Environment.variables.ERROR_msg_ID;
		CALL HBC_Common.GetErrorContext(InputExceptionList,Environment.Exception);
		
		SET pException.ErrorType    = Environment.Exception.ErrorTpe;
		SET pException.Text   		= Environment.Exception.ErrorDes;
		SET pException.Number 		= Environment.Exception.ErrorCde;
		
		-- constructing the exception output message		
		DECLARE rOutput REFERENCE TO OutputRoot.XMLNSC.ns:CMSStockFault;
		CREATE FIELD OutputRoot.XMLNSC.ns:CMSStockFault AS rOutput;
		
		IF pException.ErrorType = 'UserException' THEN
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 = Environment.variables.ERROR_msg_ID;
		    SET errorText 	 	 = Environment.variables.ERROR_msg_MSG;
		    SET errorDetails 	 = Environment.variables.ERROR_msg_MSG;
		    
		    SET rOutput.ns1:code = errorCodeID;
		    SET rOutput.ns1:message = errorText;
		    SET rOutput.ns1:severity = 'low';
		    
		-- system/sockettimeout error    
		ELSE   
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 =  pException.Number;
		    SET errorText 	 	 =  pException.Text;
		    SET errorDetails 	 =  pException.Text;
		    
		    SET rOutput.ns1:code = errorCodeID;
		    SET rOutput.ns1:message = errorText;
		    SET rOutput.ns1:severity = 'high';
		    
		END IF;	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;