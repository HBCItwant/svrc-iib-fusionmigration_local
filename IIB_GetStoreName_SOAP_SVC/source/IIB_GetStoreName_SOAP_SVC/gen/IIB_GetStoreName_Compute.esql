BROKER SCHEMA gen
DECLARE ns NAMESPACE 'http://www.hbc.com/CommonModules/GetStoreName';


/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : process_Request_Response
* DESCRIPTION : Call to the opertaion process_Request_Response_Compute in IIB_GetStoreName_SOAP_SVC. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/24/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

--  Declare error code and error messages  for the inbound request
		DECLARE ERROR_p_chain 					CONSTANT CHARACTER 	'1000';
		DECLARE ERROR_p_chain_msg 			    CONSTANT CHARACTER 	'Input chain info is not provided';
		DECLARE ERROR_DB	 					CONSTANT CHARACTER 	'0001';
		DECLARE ERROR_DB_msg 			   		CONSTANT CHARACTER 	'An unexpected database error has occurred in RFS.';
		DECLARE errorMsg            CHARACTER;


CREATE COMPUTE MODULE process_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputRoot.*[<];
		Declare Query,p_chain CHARACTER;
		set p_chain = InputRoot.XMLNSC.ns:StrNameRequest.ns:Chain;
		-- Create the request if the p_countrycode is populated
		IF (TRIM(p_chain) IS NULL OR TRIM(p_chain) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_chain;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_chain_msg;
			SET errorMsg =  ERROR_p_chain_msg;
		    THROW USER EXCEPTION CATALOG 'GetStoreName_Data_p_chain_Validation' MESSAGE 1005 VALUES(errorMsg) ;
		END IF;
		
	set Query = 'select STORE_NO,STORE_NAME from LT.RF_STORE_CMS WHERE CHAIN=21';
		
		set OutputRoot.XML.Test.Results[] = PASSTHRU(Query);
		

		
	END;
END MODULE;


/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : IIB_GetStoreName_SOAP_SVCInputFailureHandler
* DESCRIPTION : Call to the opertaion IIB_GetStoreName_SOAP_SVCInputFailureHandler_Compute in IIB_GetStoreName_SOAP_SVCInputFailureHandler. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/24/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE IIB_GetStoreName_SOAP_SVCInputFailureHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE pException 			REFERENCE TO InputExceptionList;
		DECLARE messageNumber INTEGER ;
		DECLARE messageText CHARACTER;
		DECLARE UserGenErrorMsg		CONSTANT CHARACTER 	'User generated exception';
		
		SET  messageNumber = Environment.variables.ERROR_msg_ID;
		CALL HBC_Common.GetErrorContext(InputExceptionList,Environment.Exception);
		
		SET pException.ErrorType    = Environment.Exception.ErrorTpe;
		SET pException.Text   		= Environment.Exception.ErrorDes;
		SET pException.Number 		= Environment.Exception.ErrorCde;
		
		-- constructing the exception output message		
		DECLARE rOutput REFERENCE TO OutputRoot.XMLNSC.ns:StrNameFault;
		CREATE FIELD OutputRoot.XMLNSC.ns:StrNameFault AS rOutput;
		
		IF pException.ErrorType = 'UserException' THEN
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 = Environment.variables.ERROR_msg_ID;
		    SET errorText 	 	 = Environment.variables.ERROR_msg_MSG;
		    SET errorDetails 	 = Environment.variables.ERROR_msg_MSG;
		    
		    SET rOutput.ns:code = errorCodeID;
		    SET rOutput.ns:message = errorText;
		    SET rOutput.ns:severity = 'low';
		    
		ElseIF pException.ErrorType = 'DatabaseException' THEN 
			
		    SET rOutput.ns:code = ERROR_DB;
		    SET rOutput.ns:message = ERROR_DB_msg;
		    SET rOutput.ns:severity = 'low';
	   
		-- system/sockettimeout error    
		ELSE   
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 =  pException.Number;
		    SET errorText 	 	 =  pException.Text;
		    SET errorDetails 	 =  pException.Text;
		    
		    SET rOutput.ns:code = errorCodeID;
		    SET rOutput.ns:message = errorText;
		    SET rOutput.ns:severity = 'high';
		    
		END IF;	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

