BROKER SCHEMA gen
--DECLARE schemaName_rfs EXTERNAL CHARACTER;
DECLARE ns5 NAMESPACE 'http://xmlns.hbc.com/CommonModules/RFSHierarchyService/Types';
DECLARE ns NAMESPACE 'http://xmlns.hbc.com/CommonModules/RFSHierarchyService';

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveMfgInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveMfgInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

--  Declare error code and error messages  for the inbound request
		DECLARE ERROR_p_chain_ID 					CONSTANT CHARACTER 	'1000';
		DECLARE ERROR_p_chain_MSG 					CONSTANT CHARACTER 	'Input chain info is not provided';
		DECLARE ERROR_p_deptNo_ID 					CONSTANT CHARACTER 	'1001';
		DECLARE ERROR_p_deptNo_MSG 					CONSTANT CHARACTER 	'Input deptNo info is not provided';
		DECLARE ERROR_p_UdaId_ID 					CONSTANT CHARACTER 	'1002';
		DECLARE ERROR_p_UdaId_MSG 					CONSTANT CHARACTER 	'Input UdaId info is not provided';
		DECLARE ERROR_p_GmmNo_ID 					CONSTANT CHARACTER 	'1003';
		DECLARE ERROR_p_GmmNo_MSG 					CONSTANT CHARACTER 	'Input GmmNO info is not provided';
		DECLARE ERROR_p_DmmNo_ID 					CONSTANT CHARACTER 	'1004';
		DECLARE ERROR_p_DmmNo_MSG 					CONSTANT CHARACTER 	'Input DmmNO info is not provided';
		DECLARE ERROR_p_classNo_ID 					CONSTANT CHARACTER 	'1005';
		DECLARE ERROR_p_classNo_MSG 				CONSTANT CHARACTER 	'Input classNo info is not provided';
		DECLARE ERROR_p_departmentNo_ID 			CONSTANT CHARACTER 	'1006';
		DECLARE ERROR_p_departmentNo_MSG 			CONSTANT CHARACTER 	'Input departmentNo info is not provided';
		DECLARE errorMsg            CHARACTER;
		
CREATE COMPUTE MODULE retrieveMfgInfo_Request_Response_Compute
	DECLARE schemaName_rfs EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DECLARE p_chain,p_deptNo,Query CHARACTER;

		SET p_chain= InputRoot.XMLNSC.ns:RFSHierarchyMfgByChainDeptRequest.ns5:chain;
		SET p_deptNo= InputRoot.XMLNSC.ns:RFSHierarchyMfgByChainDeptRequest.ns5:departmentNo;
	    --SET Query = 'SELECT  a.mfg_no, a.mfg_name, a.dept_no, b.chain FROM rfs.rf_dept_mfg a, rf_department b WHERE  b.dept_no = a.dept_no AND  b.chain = ''' || Cast(p_chain as char) || ''' AND a.dept_no = ''' || Cast(p_deptNo as char) || ''' ORDER BY a.mfg_no';
	    SET Query = 'SELECT  a.mfg_no, a.mfg_name, a.dept_no, b.chain FROM '|| schemaName_rfs ||'.rf_dept_mfg a, rf_department b WHERE  (b.dept_no = a.dept_no) AND  (b.chain = ?) AND (a.dept_no = ?) ORDER BY a.mfg_no';
	    SET OutputRoot.XML.Test.Result[] = PASSTHRU(Query,p_chain,p_deptNo);
		
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveUDAInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveUDAInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE retrieveUDAInfo_Request_Response_Compute
	DECLARE schemaName_hbtc EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DECLARE schemaName_hbtc CHARACTER;
		SET schemaName_hbtc = 'HBTC';
		DECLARE p_chain,p_UdaId,Query,InfoByUdaID,GetUDAInfo CHARACTER;
		Declare varUdaID boolean EXISTS(InputRoot.XMLNSC.ns:RFSHierarchyByUDARequest.ns5:UdaID[]);

		if ((varUdaID=TRUE) and (InputRoot.XMLNSC.ns:RFSHierarchyByUDARequest.ns5:UdaID <> '')) THEN
	--		SET p_chain= InputRoot.XMLNSC.ns:RFSHierarchyByUDARequest.ns5:chain;
			SET p_UdaId= InputRoot.XMLNSC.ns:RFSHierarchyByUDARequest.ns5:UdaID;
			--set InfoByUdaID = 'SELECT DISTINCT t1.UDA_ID, t1.UDA_DESC, t0.UDA_VALUE, t0.UDA_VALUE_DESC, t0.UDA_ID FROM HBTC.RF_UDA t1 LEFT OUTER JOIN HBTC.RF_UDA_VALUES t0 ON (t0.UDA_ID = t1.UDA_ID) WHERE (t1.UDA_ID = ''' || Cast(p_UdaId as char) || ''') ORDER BY t1.UDA_ID, t0.UDA_VALUE';
			-- do we need chain in the query
			set InfoByUdaID = 'SELECT DISTINCT t1.UDA_ID, t1.UDA_DESC, t0.UDA_VALUE, t0.UDA_VALUE_DESC, t0.UDA_ID FROM '||schemaName_hbtc||'.RF_UDA t1 LEFT OUTER JOIN '||schemaName_hbtc||'.RF_UDA_VALUES t0 ON (t0.UDA_ID = t1.UDA_ID) WHERE (t1.UDA_ID = ?) ORDER BY t1.UDA_ID, t0.UDA_VALUE';
			SET OutputRoot.XML.Test.Result[] = PASSTHRU(InfoByUdaID,p_UdaId);
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			-- do we need the p_chain variable.
--			set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:chain;
			set GetUDAInfo = 'select UDA_ID, UDA_DESC from HBTC.RF_UDA where UDA_ID IN (401  , 402 )';
			SET OutputRoot.XML.Test.Result[] = PASSTHRU(GetUDAInfo);
			PROPAGATE TO TERMINAL 'out2';
		End if;

	END;
END MODULE;


/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveClassInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveClassInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE retrieveClassInfo_Request_Response_Compute
	DECLARE schemaName_rfs EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 --CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DECLARE p_chain,p_deptNo,Query CHARACTER;
		set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyClassByChainDeptRequest.ns5:chain;
		set p_deptNo= InputRoot.XMLNSC.ns:RFSHierarchyClassByChainDeptRequest.ns5:departmentNo;
		
		-- Create the request if the p_chain is populated
		IF (TRIM(p_chain) IS NULL OR TRIM(p_chain) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_chain_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_chain_MSG;
			SET errorMsg =  ERROR_p_chain_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_Hierarchy_Data_p_chain_Validation' MESSAGE 1001 VALUES(errorMsg) ;
		END IF;
		
		-- Create the request if the p_deptNo is populated
		IF (TRIM(p_deptNo) IS NULL OR TRIM(p_deptNo) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_deptNo_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_deptNo_MSG;
			SET errorMsg =  ERROR_p_deptNo_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_Hierarchy_Data_p_deptNo_Validation' MESSAGE 1002 VALUES(errorMsg) ;
		END IF;
		
		--SET Query = 'SELECT t1.DEPT_NO, t1."CHAIN", t0.CLASS_NO, t0.CLASS_DESC, t0.DEPT_NO FROM RFS.RF_DEPARTMENT t1 LEFT OUTER JOIN RFS.RF_DEPT_CLASS t0 ON (t1.DEPT_NO = t0.DEPT_NO) WHERE ((t1."CHAIN" = ''' || Cast(p_chain as char) || ''' ) AND (t1.DEPT_NO = ''' || Cast(p_deptNo as char) || ''' ))';
		SET Query = 'SELECT t1.DEPT_NO, t1."CHAIN", t0.CLASS_NO, t0.CLASS_DESC, t0.DEPT_NO FROM RFS.RF_DEPARTMENT t1 LEFT OUTER JOIN '||schemaName_rfs||'.RF_DEPT_CLASS t0 ON (t1.DEPT_NO = t0.DEPT_NO) WHERE ((t1."CHAIN" = ? ) AND (t1.DEPT_NO = ? ))';
		SET OutputRoot.XML.Test.Result[] = PASSTHRU(Query,p_chain,p_deptNo);
	END;
END MODULE;


/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveDeptInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveDeptInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE retrieveDeptInfo_Request_Response_Compute
	DECLARE schemaName_rfs EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
--		DECLARE schemaName CHARACTER;
--		SET schemaName = 'RFS';
		DECLARE p_chain CHARACTER InputRoot.XMLNSC.ns:RFSHierarchyDeptByChainRequest.ns5:chain;
--		DECLARE sql_RFSHierarchyDeptByChain CHARACTER 'select DEPT_NO, DEPT_DESC from RFS.RF_DEPARTMENT WHERE CHAIN = ? ' ;
		DECLARE sql_RFSHierarchyDeptByChain CHARACTER 'select D1.DEPT_NO, D1.DEPT_DESC from '||schemaName_rfs ||'.RF_DEPARTMENT D1 WHERE D1.CHAIN = ? order by D1.DEPT_NO' ;
		
--		set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyDeptByChainRequest.ns5:chain;
--		DECLARE Query CHARACTER;
--		set Query = 'SELECT D1.DEPT_NO, D1.DEPT_DESC FROM RFS.RF_DEPARTMENT D1 WHERE D1.CHAIN =''' || Cast(p_chain as char) || ''' order by D1.DEPT_NO ' ;
		
		SET OutputRoot.XML.Test.Result[] = PASSTHRU(sql_RFSHierarchyDeptByChain,p_chain);
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveMerchOrgInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveMerchOrgInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE retrieveMerchOrgInfo_Request_Response_Compute
	DECLARE schemaName_rfs EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		SET OutputRoot = InputRoot;
		DECLARE p_GmmNo,p_dmmNo,p_chain,GetGMMInfo,GetDeptInfoByDMM,GetDMMInfo CHARACTER;
		DECLARE schemaName CHARACTER;
		SET schemaName = 'RFS';
		Declare varX boolean EXISTS(InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:GMMNo[]);
		Declare varY boolean EXISTS(InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:DMMNo[]);
		-- what will happen if both GmmNo and DMMNo exists in request
		if varX=TRUE THEN
			set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:chain;
			set p_GmmNo= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:GMMNo;
			--set GetDMMInfo = 'SELECT DISTINCT(M1.DMM_NO), M1.GMM_NO, M1.GMM_NAME, M1.DMM_NAME, M1.CHAIN FROM RFS.V_RF_MERCHANT_ORG M1 WHERE ((M1.CHAIN = ''' || Cast(p_chain as char) || ''') AND (M1.GMM_NO = ''' || Cast(p_GmmNo as char) || ''')) ORDER BY M1.DMM_NO';
			set GetDMMInfo = 'SELECT DISTINCT(M1.DMM_NO), M1.GMM_NO, M1.GMM_NAME, M1.DMM_NAME, M1.CHAIN FROM '||schemaName_rfs||'.V_RF_MERCHANT_ORG M1 WHERE (M1.CHAIN = ?) AND (M1.GMM_NO = ?) ORDER BY M1.DMM_NO';
			SET OutputRoot.XML.Test.Result[] = PASSTHRU(GetDMMInfo,p_chain,p_GmmNo);
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF varY=TRUE THEN
			set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:chain;
			set p_dmmNo= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:DMMNo;
			--set GetDeptInfoByDMM ='SELECT M1.GMM_NO, M1.GMM_NAME, M1.DMM_NO, M1.DMM_NAME, M1.DEPT_NO, M1.DEPT_NAME, M1.CHAIN FROM RFS.V_RF_MERCHANT_ORG M1 WHERE ((M1.DMM_NO = ''' || Cast(p_dmm as char) || ''' ) AND (M1.CHAIN = ''' || Cast(p_chain as char) || ''')) ORDER BY M1.DEPT_NO';
			set GetDeptInfoByDMM ='SELECT M1.GMM_NO, M1.GMM_NAME, M1.DMM_NO, M1.DMM_NAME, M1.DEPT_NO, M1.DEPT_NAME, M1.CHAIN FROM '||schemaName_rfs||'.V_RF_MERCHANT_ORG M1 WHERE ((M1.DMM_NO = ? ) AND (M1.CHAIN = ? )) ORDER BY M1.DEPT_NO';
			SET OutputRoot.XML.Test.Result[] = PASSTHRU(GetDeptInfoByDMM,p_dmmNo,p_chain);
			PROPAGATE TO TERMINAL 'out2';
		ELSE
			set p_chain= InputRoot.XMLNSC.ns:RFSHierarchyMerchOrgRequest.ns5:chain;
			--set GetGMMInfo = 'SELECT DISTINCT(M1.GMM_NO), M1.GMM_NAME, M1.CHAIN FROM RFS.V_RF_MERCHANT_ORG M1 WHERE  M1.CHAIN=''' || Cast(p_chain as char) || ''' order by M1.GMM_NO ';
			set GetGMMInfo = 'SELECT DISTINCT(M1.GMM_NO), M1.GMM_NAME, M1.CHAIN FROM '||schemaName_rfs||'.V_RF_MERCHANT_ORG M1 WHERE  M1.CHAIN=? order by M1.GMM_NO ';
			SET OutputRoot.XML.Test.Result[] = PASSTHRU(GetGMMInfo,p_chain);
			PROPAGATE TO TERMINAL 'out3' FINALIZE NONE DELETE DEFAULT;
		End if;

	END;
	
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : retrieveVendStyleInfo_Request_Response_Compute
* DESCRIPTION : Call to the opertaion retrieveVendStyleInfo_Request_Response_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE retrieveVendStyleInfo_Request_Response_Compute
	DECLARE schemaName_rfs EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;

		DECLARE p_chain,p_classNo,p_departmentNo,GetMFGByDept CHARACTER;
		set p_chain			= InputRoot.XMLNSC.ns:RFSHierarchyVendStyleByChainDeptClassRequest.ns5:chain;
		set p_classNo		= InputRoot.XMLNSC.ns:RFSHierarchyVendStyleByChainDeptClassRequest.ns5:classNo;
		set p_departmentNo  = InputRoot.XMLNSC.ns:RFSHierarchyVendStyleByChainDeptClassRequest.ns5:departmentNo;
		--set GetMFGByDept = 'SELECT DISTINCT t1.VENDOR_STYLE, t1.CLASS_NO, t1.DEPT_NO, t0.DEPT_NO, t0.CLASS_NO, t2.CHAIN, t3.MFG_NAME FROM RFS.RF_ITEM t1 LEFT OUTER JOIN RFS.RF_DEPT_CLASS t0 ON ((t1.CLASS_NO = t0.CLASS_NO) AND (t1.DEPT_NO = t0.DEPT_NO)) LEFT OUTER JOIN RFS.RF_UPC t2 ON (t1.SKN_NO = t2.SKN_NO) LEFT OUTER JOIN RFS.RF_DEPT_MFG t3 ON  ((t1.MFG_NO = t3.MFG_NO) AND (t1.DEPT_NO = t3.DEPT_NO)) WHERE (((t2.CHAIN = ''' || Cast(p_chain as char) || ''') AND (t1.DEPT_NO = ''' || Cast(p_departmentNo as char) || ''')) AND (t1.CLASS_NO = ''' || Cast(p_classNo as char) || ''') ) ORDER BY t1.VENDOR_STYLE ' ;
		-- if one of the parameter is missing then what is expected response
		set GetMFGByDept = 'SELECT DISTINCT t1.VENDOR_STYLE, t1.CLASS_NO, t1.DEPT_NO, t0.DEPT_NO, t0.CLASS_NO, t2.CHAIN, t3.MFG_NAME FROM '||schemaName_rfs||'.RF_ITEM t1 LEFT OUTER JOIN RFS.RF_DEPT_CLASS t0 ON ((t1.CLASS_NO = t0.CLASS_NO) AND (t1.DEPT_NO = t0.DEPT_NO)) LEFT OUTER JOIN RFS.RF_UPC t2 ON (t1.SKN_NO = t2.SKN_NO) LEFT OUTER JOIN RFS.RF_DEPT_MFG t3 ON  ((t1.MFG_NO = t3.MFG_NO) AND (t1.DEPT_NO = t3.DEPT_NO)) WHERE (((t2.CHAIN = ?) AND (t1.DEPT_NO = ?)) AND (t1.CLASS_NO = ?) ) ORDER BY t1.VENDOR_STYLE ' ;
		SET OutputRoot.XML.Test.Result[] = PASSTHRU(GetMFGByDept,p_chain,p_departmentNo,p_classNo);
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : IIB_RFS_Hierarchy_DataService_SOAP_SVCInputCatchHandler_Compute
* DESCRIPTION : Call to the opertaion IIB_RFS_Hierarchy_DataService_SOAP_SVCInputCatchHandler_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/
CREATE COMPUTE MODULE IIB_RFS_Hierarchy_DataService_SOAP_SVCInputCatchHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : IIB_RFS_Hierarchy_DataService_SOAP_SVCInputFailureHandler_Compute
* DESCRIPTION : Call to the opertaion IIB_RFS_Hierarchy_DataService_SOAP_SVCInputFailureHandler_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* 1.1 			08/21/2018 			Itwant 				Adding logic to handle user defined exception
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE IIB_RFS_Hierarchy_DataService_SOAP_SVCInputFailureHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		 CALL CopyMessageHeaders();
--		 CALL CopyEntireMessage();
		DECLARE pException 			REFERENCE TO InputExceptionList;
		DECLARE messageNumber INTEGER ;
		DECLARE messageText CHARACTER;
		DECLARE UserGenErrorMsg		CONSTANT CHARACTER 	'User generated exception';
		
		SET  messageNumber = Environment.variables.ERROR_msg_ID;
		CALL HBC_Common.GetErrorContext(InputExceptionList,Environment.Exception);
		
		SET pException.ErrorType    = Environment.Exception.ErrorTpe;
		SET pException.Text   		= Environment.Exception.ErrorDes;
		SET pException.Number 		= Environment.Exception.ErrorCde;
		
		-- constructing the exception output message		
		DECLARE rOutput REFERENCE TO OutputRoot.XMLNSC.ns:RFSHierarchyFault;
		CREATE FIELD OutputRoot.XMLNSC.ns:RFSHierarchyDataResponse.ns:RFSHierarchyFault AS rOutput;
		
		IF pException.ErrorType = 'UserException' THEN
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 = Environment.variables.ERROR_msg_ID;
		    SET errorText 	 	 = Environment.variables.ERROR_msg_MSG;
		    SET errorDetails 	 = Environment.variables.ERROR_msg_MSG;
		    
		    SET rOutput.ns5:code = errorCodeID;
		    SET rOutput.ns5:message = errorText;
		    SET rOutput.ns5:severity = 'low';
		    
		-- system/sockettimeout error    
		ELSE   
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 =  pException.Number;
		    SET errorText 	 	 =  pException.Text;
		    SET errorDetails 	 =  pException.Text;
		    
		    SET rOutput.ns5:code = errorCodeID;
		    SET rOutput.ns5:message = errorText;
		    SET rOutput.ns5:severity = 'high';
		    
		END IF;	
		
		 RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : IIB_RFS_Hierarchy_DataService_SOAP_SVCInputHTTPTimeoutHandler_Compute
* DESCRIPTION : Call to the opertaion IIB_RFS_Hierarchy_DataService_SOAP_SVCInputHTTPTimeoutHandler_Compute in IIB_RFS_Hierarchy_DataService. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/20/2018 			vijay 				Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE IIB_RFS_Hierarchy_DataService_SOAP_SVCInputHTTPTimeoutHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
