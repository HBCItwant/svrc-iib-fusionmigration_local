BROKER SCHEMA HBC_Common_Variables

	-- Walk the tree recursively starting at inRef. 
	-- Replace all sequences of same-named elements with a JSON array.
	-- A JSON array has a name and some child elements with values. 
	-- The array element must have field type JSON.Array.
	-- The child elements that hold the values can optionally have names. 
	CREATE PROCEDURE createJSONArrays(IN root REFERENCE ) 
	BEGIN
		-- track the start and end of 'arrays' ( sequences of same-named siblings )
		DECLARE firstArrayElementRef REFERENCE TO root;
		DECLARE siblingRef REFERENCE TO root;
		DECLARE arraySize INTEGER 0;

		WHILE LASTMOVE(siblingRef) DO
			
			-- Process any child elements first 
			DECLARE firstChildRef REFERENCE TO siblingRef;
			MOVE firstChildRef FIRSTCHILD;
			IF LASTMOVE(firstChildRef) THEN
				CALL createJSONArrays(firstChildRef);
			END IF;

			-- IF this sibling's name is different from the previous one.
			IF FIELDNAME(siblingRef) = FIELDNAME(firstArrayElementRef) THEN
				SET arraySize = arraySize + 1;
			ELSE
				-- IF there was a sequence of two or more siblings with the same name
				IF arraySize > 1 THEN
					CALL createJSONArray(firstArrayElementRef, arraySize);
				END IF;				

				-- start scanning for a new array
				MOVE firstArrayElementRef TO siblingRef;
				SET arraySize = 1;
			END IF;
			
			MOVE siblingRef NEXTSIBLING;
		END WHILE;
		
		IF arraySize > 1 THEN
			CALL createJSONArray(firstArrayElementRef, arraySize);
		END IF;
	END;

	CREATE PROCEDURE createJSONArray(IN firstArrayElementRef REFERENCE, IN arraySize INTEGER) BEGIN
		-- Create a parent element for the array
		DECLARE arrayParentRef REFERENCE TO firstArrayElementRef;
		CREATE PREVIOUSSIBLING OF firstArrayElementRef 
			AS arrayParentRef 
			TYPE JSON.Array 
			NAMESPACE FIELDNAMESPACE(firstArrayElementRef) 
			NAME FIELDNAME(firstArrayElementRef);
			
		-- Make the array members children of the new parent element
		DECLARE pos INTEGER 1;
		WHILE pos <= arraySize DO
			DECLARE tempRef REFERENCE TO firstArrayElementRef;
			-- advance the reference. This should never fail because we have
			-- already walked all of these siblings to discover the array.
			MOVE firstArrayElementRef NEXTSIBLING;

			DETACH tempRef;
			ATTACH tempRef TO arrayParentRef AS LASTCHILD;
			
			SET pos = pos + 1;
		END WHILE;
	END;
