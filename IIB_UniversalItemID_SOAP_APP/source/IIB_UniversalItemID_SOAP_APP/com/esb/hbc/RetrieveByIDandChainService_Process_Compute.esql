BROKER SCHEMA com.esb.hbc


DECLARE ERROR_IDandChainService_IP_LT_ID CONSTANT CHARACTER '0031';
DECLARE ERROR_IDandChainService_IP_LT_MSG CONSTANT CHARACTER 'Invalid Inputs. Enter Valid Chain, ItemID.';
DECLARE ERROR_IDandChainService_IP_SAKS_ID CONSTANT CHARACTER '0006';
DECLARE ERROR_IDandChainService_IP_SAKS_MSG CONSTANT CHARACTER 'Invalid Inputs. Enter Valid Chain, ItemID and Store.';
DECLARE ERROR_ItemInfoByIDandChain_NoData_LTItemInfoByIDandChain_ID CONSTANT CHARACTER '0032';
DECLARE ERROR_ItemInfoByIDandChain_NoData_LTItemInfoByIDandChain_MSG CONSTANT CHARACTER 'No data found in LT RFS Item Table for the ItemID/Chain combination provided.';
DECLARE ERROR_ItemInfoByIDandChain_NoData_LTPriceStatus_ID CONSTANT CHARACTER '0034';
DECLARE ERROR_ItemInfoByIDandChain_NoData_LTPriceStatus_MSG CONSTANT CHARACTER 'No LT price status data found in RFS Tables.';
DECLARE ERROR_ItemInfoByIDandChain_NoData_SAKSItemInfoByIDandChain_ID CONSTANT CHARACTER '0001';
DECLARE ERROR_ItemInfoByIDandChain_NoData_SAKSItemInfoByIDandChain_MSG CONSTANT CHARACTER 'No data found in UPC Item table for the Item ID provided.';
DECLARE ERROR_ItemInfoByIDandChain_NoData_RetrieveItemInfoBySKN_ID CONSTANT CHARACTER '0002';
DECLARE ERROR_ItemInfoByIDandChain_NoData_RetrieveItemInfoBySKN_MSG CONSTANT CHARACTER 'No data found in RFS Item Table for the ItemID/Chain combination provided.';


DECLARE ns8 NAMESPACE 'http://schemas.datacontract.org/2004/07/Saks.StoreSystems.Domain.PriceInquiry';
DECLARE ns16 NAMESPACE 'http://tempuri.org/';


/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : RetrieveByIDandChainService_LT_Process_Compute
* DESCRIPTION : Call to the opertaion RetrieveByIDandChainService_LT_Process_Compute in RetrieveByIDandChainService_Process.subflow.
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 		Author 			Comments
* 1.0 			09/07/2018 				vijay 			Initial Creation
* ------------------------------------------------------------------------------------------------------------*/


CREATE COMPUTE MODULE RetrieveByIDandChainService_LT_Process_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputRoot.*[<];
	
		DECLARE p_ItemID, p_Chain, Query_LTItemInfoByIDandChain,Query_GetLTPriceStatus, p_SKN CHARACTER;
		
		SET p_ItemID = InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:ItemID;
		SET p_Chain = InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:Chain;
		
		
		IF (TRIM(p_Chain) IS NULL OR TRIM(p_Chain) ='' ) or (TRIM(p_ItemID) IS NULL OR TRIM(p_ItemID) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID = ERROR_IDandChainService_IP_LT_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_IDandChainService_IP_LT_MSG;
			SET errorMsg = ERROR_IDandChainService_IP_LT_MSG;
			THROW USER EXCEPTION CATALOG 'IDandChainService_Input_Validation' MESSAGE 1006 VALUES(errorMsg) ;
		END IF;

		
		
		SET Query_LTItemInfoByIDandChain = 'SELECT DISTINCT B.REORDER_UPC_NO AS UPC, A.COLOR_CODE, A.SIZE_CODE, A.SIZE_DESC, A.SKN_NO, A.SVS, A.ITEM_DESC_SHORT, A.ITEM_DESC_LONG, A.CUR_TKT_PRICE_DOL, A.CUR_OWN_RETAIL_DOL, A.ORIG_OWN_RTL_DOL, A.DEPT_NO, A.MFG_NO, C.MFG_NAME, A.COST_AMOUNT_DOL, A.CLASS_NO, A.COLOR_DESC, A.CONSIGNMENT_CODE, A.FASHION_STYLE_NO, A.VENDOR_STYLE_20CH, A.VENDOR_STYLE, A.SEASON_TYPE_CODE , A.CATALOG_CODE, C.VENDOR_NO, A.COMPARE_AT_AMT_DOL, D.DEPT_DESC, E.CLASS_DESC, F.DMM_NO, F.DMM_NAME, F.GMM_NO, F.GMM_NAME FROM LT.RF_ITEM A, LT.RF_UPC B, LT.RF_DEPT_MFG C, LT.RF_DEPARTMENT D, LT.RF_DEPT_CLASS E, LT.RF_MERCHANT_ORG F WHERE A.SKN_NO = B.SKN_NO AND (B.SKN_NO = ? OR B.UPC = ?) AND A.DEPT_NO = C.DEPT_NO AND A.MFG_NO = C.MFG_NO AND A.DEPT_NO = D.DEPT_NO AND A.CLASS_NO = E.CLASS_NO AND D.DEPT_NO = E.DEPT_NO AND A.DEPT_NO = F.DEPT_NO ';
		
		SET OutputRoot.XML.Query.GetLTItemInfoByIDandChainOutputCollection.GetLTItemInfoByIDandChainOutput[] = PASSTHRU(Query_LTItemInfoByIDandChain,p_ItemID,p_ItemID);
		
		DECLARE Count_Query_LTItemInfoByIDandChain INTEGER CARDINALITY(OutputRoot.XML.Query.GetLTItemInfoByIDandChainOutputCollection.GetLTItemInfoByIDandChainOutput[]);
		
		IF Count_Query_LTItemInfoByIDandChain <= 0 THEN
			
			SET Environment.variables.ERROR_msg_ID = ERROR_ItemInfoByIDandChain_NoData_LTItemInfoByIDandChain_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_ItemInfoByIDandChain_NoData_LTItemInfoByIDandChain_MSG;
			SET errorMsg = ERROR_ItemInfoByIDandChain_NoData_LTItemInfoByIDandChain_MSG;
			THROW USER EXCEPTION CATALOG 'TItemInfoByIDandChain_NoDataFound' MESSAGE 1006 VALUES(errorMsg) ;
		END IF;
		
		SET Query_GetLTPriceStatus = 'SELECT * FROM   (SELECT SKN_NO,     EFFECTIVE_DATE,     REGION_TYPE_CODE,     PRICE_TYPE_CODE,     DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS,     REQ_REASON_NO,     OWNED_ORIG_PCT_OFF,     TICKET_RETAIL_DOL,     ''N'' AS FUTURE_PERM   FROM LT.RF_ITEM_PRICING   WHERE skn_no        = ?   AND PRICE_TYPE_CODE = ''Z''   AND effective_date  < CURRENT_DATE   ORDER BY effective_date DESC   ) WHERE rownum = 1 UNION ALL SELECT * FROM   (SELECT SKN_NO,     EFFECTIVE_DATE,     REGION_TYPE_CODE,     PRICE_TYPE_CODE,     DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS,     REQ_REASON_NO,     OWNED_ORIG_PCT_OFF,     TICKET_RETAIL_DOL,     ''Z'' AS FUTURE_PERM   FROM LT.RF_ITEM_PRICING   WHERE skn_no       = ?   AND effective_date < CURRENT_DATE   ORDER BY effective_date DESC   ) WHERE rownum = 1 UNION ALL SELECT SKN_NO,   EFFECTIVE_DATE,   REGION_TYPE_CODE,   PRICE_TYPE_CODE,   DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS,   REQ_REASON_NO,   OWNED_ORIG_PCT_OFF,   TICKET_RETAIL_DOL,   ''Y'' AS FUTURE_PERM FROM LT.RF_ITEM_PRICING WHERE skn_no       = ? AND effective_date > CURRENT_DATE';
		
		SET p_SKN = OutputRoot.XML.Query.GetLTItemInfoByIDandChainOutputCollection.GetLTItemInfoByIDandChainOutput.SKN_NO;
		
		SET OutputRoot.XML.Query.GetLTPriceStatusOutputCollection.GetLTPriceStatusOutput[] = PASSTHRU(Query_GetLTPriceStatus,p_SKN,p_SKN,p_SKN);
		
		DECLARE Count_Query_GetLTPriceStatus INTEGER CARDINALITY(OutputRoot.XML.Query.GetLTPriceStatusOutputCollection.GetLTPriceStatusOutput[]);
		
		IF Count_Query_GetLTPriceStatus <= 0 THEN
			
			SET Environment.variables.ERROR_msg_ID = ERROR_ItemInfoByIDandChain_NoData_LTPriceStatus_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_ItemInfoByIDandChain_NoData_LTPriceStatus_MSG;
			SET errorMsg = ERROR_ItemInfoByIDandChain_NoData_LTPriceStatus_MSG;
			THROW USER EXCEPTION CATALOG 'TItemInfoByIDandChain_NoDataFound' MESSAGE 1006 VALUES(errorMsg) ;
		END IF;
		
		
		
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : RetrieveByIDandChainService_SAKS_Process_Compute
* DESCRIPTION : Call to the opertaion RetrieveByIDandChainService_SAKS_Process_Compute in RetrieveByIDandChainService_Process.subflow.
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 		Author 			Comments
* 1.0 			09/07/2018 				vijay 			Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE RetrieveByIDandChainService_SAKS_Process_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		DELETE FIELD OutputRoot.*[<];
			SET Environment.variables.InputRequest = InputRoot;
		
		DECLARE p_Store,p_ItemID, p_CountryCode,p_Chain, p_MDSE_COUNTRY_CODE, Query_CountryCdeByStore, Query_PriceStatus, Query_SAKSItemInfoByIDandChain,Query_RetrieveItemInfoBySKN,Query_GetLTPriceStatus, p_SKN CHARACTER;
		SET p_Store =  FIELDVALUE(InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:Store);
		SET p_ItemID = InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:ItemID;
		SET p_Chain = InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:Chain;
		SET p_CountryCode = FIELDVALUE(InputRoot.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:CountryCode);
		
		IF (TRIM(p_CountryCode) IS NULL OR TRIM(p_CountryCode) = '' ) THEN
			
			SET Query_CountryCdeByStore = 'SELECT STORE_NO, STORE_NAME, COUNTRY_ID, "CHAIN" FROM RFS.RF_STORE WHERE (STORE_NO = ?)';
			
			SET OutputRoot.XML.Query_CountryCdeByStore.Result[] = PASSTHRU(Query_CountryCdeByStore,p_Store );
				
			DECLARE Count_Query_CntryCdeByStore INTEGER CARDINALITY(OutputRoot.XML.Query_CountryCdeByStore.Result[]);
				
				IF Count_Query_CntryCdeByStore <> 0 THEN
					
					SET p_CountryCode = OutputRoot.XML.Query_CountryCdeByStore.Result.COUNTRY_ID;
					
				END IF;
					
		END IF;
		
		
		IF (TRIM(p_CountryCode) IS NULL OR TRIM(p_CountryCode) ='' )  or (TRIM(p_Chain) IS NULL OR TRIM(p_Chain) ='' )  or (TRIM(p_ItemID) IS NULL OR TRIM(p_ItemID) ='' )THEN
			SET Environment.variables.ERROR_msg_ID = ERROR_IDandChainService_IP_SAKS_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_IDandChainService_IP_SAKS_MSG;
			SET errorMsg = ERROR_IDandChainService_IP_SAKS_MSG;
			THROW USER EXCEPTION CATALOG 'IDandChainService_Input_Validation' MESSAGE 1006 VALUES(errorMsg) ;
		END IF;

		
		SET Query_SAKSItemInfoByIDandChain = 'SELECT DISTINCT A.SKN_NO, B.REORDER_UPC_NO AS UPC, A.SVS, A.FASHION_STYLE_NO, A.VENDOR_STYLE, B.CHAIN, B.MDSE_COUNTRY_CODE, C.MFG_NAME, C.MFG_NO FROM RFS.RF_ITEM A LEFT JOIN RFS.RF_UPC B ON A.SKN_NO = B.SKN_NO LEFT JOIN RFS.RF_DEPT_MFG C ON A.DEPT_NO = C.DEPT_NO WHERE(B.SKN_NO = ? OR  B.UPC = ?)  AND A.MFG_NO = C.MFG_NO AND B.CHAIN = ? AND B.MDSE_COUNTRY_CODE = ?';
		
		SET OutputRoot.XML.Query.RetrieveInfoByIDandChainOutputCollection.RetrieveInfoByIDandChainOutput[] = PASSTHRU(Query_SAKSItemInfoByIDandChain,p_ItemID,p_ItemID,p_Chain,p_CountryCode);
		
		DECLARE Count_Query_SAKSItemInfoByIDandChain INTEGER CARDINALITY(OutputRoot.XML.Query.RetrieveInfoByIDandChainOutputCollection.RetrieveInfoByIDandChainOutput[]);
		
		IF Count_Query_SAKSItemInfoByIDandChain <= 0 THEN
			
			SET Environment.variables.ERROR_msg_ID = ERROR_ItemInfoByIDandChain_NoData_SAKSItemInfoByIDandChain_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_ItemInfoByIDandChain_NoData_SAKSItemInfoByIDandChain_MSG;
			SET errorMsg = ERROR_ItemInfoByIDandChain_NoData_SAKSItemInfoByIDandChain_MSG;
			THROW USER EXCEPTION CATALOG 'ItemInfoByIDandChain_NoDataFound' MESSAGE 1006 VALUES(errorMsg) ;
		END IF;
		
		SET p_SKN = OutputRoot.XML.Query.RetrieveInfoByIDandChainOutputCollection.RetrieveInfoByIDandChainOutput.SKN_NO;
		SET p_MDSE_COUNTRY_CODE	 = OutputRoot.XML.Query.RetrieveInfoByIDandChainOutputCollection.RetrieveInfoByIDandChainOutput.MDSE_COUNTRY_CODE;
		
		SET Query_RetrieveItemInfoBySKN = 'SELECT B.UPC, B.MDSE_COUNTRY_CODE, A.SSN,    A.COLOR_CODE,    A.SIZE_CODE,    A.SIZE_DESC,    A.SKN_NO,    A.SVS,    A.ITEM_DESC_SHORT,    A.ITEM_DESC_LONG,    A.CUR_TKT_PRICE_DOL,    A.CUR_OWN_RETAIL_DOL,    A.ORIG_OWN_RTL_DOL, A.DEPT_NO,    A.MFG_NO,    A.COST_AMOUNT_DOL,    A.CLASS_NO,   A.COLOR_DESC,    A.CONSIGNMENT_CODE,    A.FASHION_STYLE_NO,    A.VENDOR_STYLE_20CH,    A.SEASON_TYPE_CODE ,A.CATALOG_CODE, C.VENDOR_NO, C.MDSC_VENDOR_NO, A.COMPARE_AT_AMT_DOL, D.DEPT_DESC, E.CLASS_DESC, F.DMM_NO,F.DMM_NAME, F.GMM_NO, F.GMM_NAME FROM    RFS.RF_ITEM A,    RFS.RF_UPC B, RFS.RF_DEPT_MFG C, RFS.RF_DEPARTMENT D, RFS.RF_DEPT_CLASS E, RFS.RF_MERCHANT_ORG F WHERE     A.SKN_NO = B.SKN_NO AND A.SKN_NO = ? AND B.MDSE_COUNTRY_CODE = ? AND B.UPC = B.REORDER_UPC_NO AND A.DEPT_NO = C.DEPT_NO AND A.MFG_NO = C.MFG_NO AND A.DEPT_NO = D.DEPT_NO AND A.CLASS_NO = E.CLASS_NO AND D.DEPT_NO = E.DEPT_NO AND A.DEPT_NO = F.DEPT_NO';
		
		SET OutputRoot.XML.Query.RetrieveItemInfoBySKNOutputCollection.RetrieveItemInfoBySKNOutput[] = PASSTHRU(Query_RetrieveItemInfoBySKN,p_SKN,p_MDSE_COUNTRY_CODE);
		
		DECLARE Count_Query_RetrieveItemInfoBySKN INTEGER CARDINALITY(OutputRoot.XML.Query.RetrieveItemInfoBySKNOutputCollection.RetrieveItemInfoBySKNOutput[]);
		
		IF Count_Query_RetrieveItemInfoBySKN <= 0 THEN
			
			SET Environment.variables.ERROR_msg_ID = ERROR_ItemInfoByIDandChain_NoData_RetrieveItemInfoBySKN_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_ItemInfoByIDandChain_NoData_RetrieveItemInfoBySKN_MSG;
			SET errorMsg = ERROR_ItemInfoByIDandChain_NoData_RetrieveItemInfoBySKN_ID;
			THROW USER EXCEPTION CATALOG 'TItemInfoByIDandChain_NoDataFound' MESSAGE 1006 VALUES(errorMsg) ;
			
		END IF;
		
		SET p_SKN = OutputRoot.XML.Query.RetrieveItemInfoBySKNOutputCollection.RetrieveItemInfoBySKNOutput.SKN_NO;
		
		SET Query_PriceStatus = 'SELECT * FROM ( SELECT SKN_NO, EFFECTIVE_DATE, REGION_TYPE_CODE, PRICE_TYPE_CODE, DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS, REQ_REASON_NO, OWNED_ORIG_PCT_OFF, TICKET_RETAIL_DOL, ''N'' as FUTURE_PERM FROM RFS.RF_ITEM_PRICING WHERE skn_no = ?  AND REGION_NO = 0  AND PRICE_TYPE_CODE = ''Z'' and effective_date < CURRENT_DATE ORDER BY effective_date DESC) WHERE rownum = 1 UNION ALL SELECT * FROM ( SELECT SKN_NO, EFFECTIVE_DATE, REGION_TYPE_CODE, PRICE_TYPE_CODE, DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS, REQ_REASON_NO, OWNED_ORIG_PCT_OFF, TICKET_RETAIL_DOL, ''Z'' as FUTURE_PERM FROM RFS.RF_ITEM_PRICING WHERE skn_no = ?  AND REGION_NO = 0  and effective_date < CURRENT_DATE ORDER BY effective_date DESC) WHERE rownum = 1 UNION ALL SELECT SKN_NO, EFFECTIVE_DATE, REGION_TYPE_CODE, PRICE_TYPE_CODE, DECODE (REQ_REASON_NO, 21, ''R'', 22, ''M'', 23, ''C'', 24, ''F'') PRICE_STATUS, REQ_REASON_NO, OWNED_ORIG_PCT_OFF, TICKET_RETAIL_DOL, ''Y'' as FUTURE_PERM FROM RFS.RF_ITEM_PRICING WHERE skn_no = ? AND REGION_NO = 0  AND effective_date > CURRENT_DATE';
		
		SET OutputRoot.XML.Query.PriceStatusOutputCollection.PriceStatusOutput[] = PASSTHRU(Query_PriceStatus,p_SKN,p_SKN,p_SKN);
		
		
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : RetrieveByIDandChainService_SAKS2_Process_Compute
* DESCRIPTION : Call to the opertaion RetrieveByIDandChainService_SAKS2_Process_Compute in RetrieveByIDandChainService_Process.subflow.
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 		Author 			Comments
* 1.0 			09/07/2018 				vijay 			Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE RetrieveByIDandChainService_SAKS2_Process_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
		SET Environment.variables.XML = InputRoot.XMLNSC;
		SET OutputRoot.XMLNSC.ns16:GetItems.ns16:UPC = InputRoot.XMLNSC.ns1:RetrieveByDeptClassResponse.ns1:RetrieveItemInfoByDeptClassOutput.ns0:UPC;
		SET OutputRoot.XMLNSC.ns16:GetItems.ns16:store = Environment.variables.InputRequest.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:Store; 
		SET OutputRoot.XMLNSC.ns16:GetItems.ns16:chain = Environment.variables.InputRequest.XMLNSC.ns1:RetrieveByIDandChainRequest.ns0:Chain;
		
	END;
END MODULE;

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : RetrieveByIDandChainService_SAKS3_Process_Compute
* DESCRIPTION : Call to the opertaion RetrieveByIDandChainService_SAKS3_Process_Compute in RetrieveByIDandChainService_Process.subflow.
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 		Author 			Comments
* 1.0 			09/07/2018 				vijay 			Initial Creation
* ------------------------------------------------------------------------------------------------------------*/

CREATE COMPUTE MODULE RetrieveByIDandChainService_SAKS3_Process_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XML = Environment.variables.XML;
		DELETE FIELD OutputRoot.XML.XmlDeclaration;
		
	END;
END MODULE;
