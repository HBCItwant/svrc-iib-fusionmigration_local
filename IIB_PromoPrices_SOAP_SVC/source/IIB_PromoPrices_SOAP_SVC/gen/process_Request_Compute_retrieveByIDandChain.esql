BROKER SCHEMA gen
DECLARE ns3 NAMESPACE 'http://xmlns.saksinc.com/CommonModules/UniversalItemID/RetrieveByIDandChain';
DECLARE ns5 NAMESPACE 'http://xmlns.saksinc.com/CommonModules/UniversalItemID/Types';
DECLARE ns NAMESPACE 'http://www.xmln.saksinc.com/CommonModules/PromoPrices';

/*------------------------------------------------------------------------------------------------------------
* FLOW NAME   : process_Request_Compute_retrieveByIDandChain
* DESCRIPTION : Call to the opertaion process_Request_Compute_retrieveByIDandChain in IIB_PromoPrices service. 
*------------------------------------------------------------------------------------------------------------
* ************************************************* REVISION HISTORY ****************************************
* ------------------------------------------------------------------------------------------------------------
* VERSION 		DATE(MM/DD/CCYY) 	Author 				Comments
* 1.0 			08/21/2018 			vijay 				Initial Creation
* 1.1           08/23/2018          Itwant			    included common exception handling sublow
* ------------------------------------------------------------------------------------------------------------*/

--  Declare error code and error messages  for the inbound request
		DECLARE ERROR_p_chain_ID 					CONSTANT CHARACTER 	'1000';
		DECLARE ERROR_p_chain_MSG 					CONSTANT CHARACTER 	'Input chain info is not provided';
		DECLARE ERROR_p_store_ID 					CONSTANT CHARACTER 	'1001';
		DECLARE ERROR_p_store_MSG 					CONSTANT CHARACTER 	'Input Store info is not provided';
		DECLARE ERROR_p_upc_ID 						CONSTANT CHARACTER 	'1002';
		DECLARE ERROR_p_upc_MSG 					CONSTANT CHARACTER 	'Input UPC info is not provided';
		DECLARE errorMsg            CHARACTER;
CREATE COMPUTE MODULE process_Request_Compute_retrieveByIDandChain
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
		DECLARE p_chain,p_store,p_upc CHARACTER;
		set p_chain = InputRoot.XMLNSC.ns:PromoPriceRequest.ns:Chain;
		set p_store = InputRoot.XMLNSC.ns:PromoPriceRequest.ns:Store;
		set p_upc	= InputRoot.XMLNSC.ns:PromoPriceRequest.ns:UPC;
		
		-- Create the request if the p_chain is populated
		IF (TRIM(p_chain) IS NULL OR TRIM(p_chain) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_chain_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_chain_MSG;
			SET errorMsg =  ERROR_p_chain_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_Promoprice_Data_p_chain_Validation' MESSAGE 1001 VALUES(errorMsg) ;
		END IF;
		-- Create the request if the p_store is populated
		IF (TRIM(p_store) IS NULL OR TRIM(p_store) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_store_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_store_MSG;
			SET errorMsg =  ERROR_p_chain_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_Promoprice_Data_p_store_Validation' MESSAGE 1002 VALUES(errorMsg) ;
		END IF;
		-- Create the request if the p_upc is populated
		IF (TRIM(p_upc) IS NULL OR TRIM(p_upc) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_upc_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_upc_MSG;
			SET errorMsg =  ERROR_p_chain_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_Promoprice_Data_p_upc_Validation' MESSAGE 1003 VALUES(errorMsg) ;
		END IF;
		
		set OutputRoot.XMLNSC.ns3:RetrieveByIDandChainRequest.ns5:ItemID = InputRoot.XMLNSC.ns:PromoPriceRequest.ns:UPC;
		set OutputRoot.XMLNSC.ns3:RetrieveByIDandChainRequest.ns5:Store  = InputRoot.XMLNSC.ns:PromoPriceRequest.ns:Store;		
		set OutputRoot.XMLNSC.ns3:RetrieveByIDandChainRequest.ns5:Chain  = InputRoot.XMLNSC.ns:PromoPriceRequest.ns:Chain;
	END;
END MODULE;



CREATE COMPUTE MODULE IIB_PromoPrices_SOAP_SVCInputFailureHandler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE pException 			REFERENCE TO InputExceptionList;
		DECLARE messageNumber INTEGER ;
		DECLARE messageText CHARACTER;
		DECLARE UserGenErrorMsg		CONSTANT CHARACTER 	'User generated exception';
		
		SET  messageNumber = Environment.variables.ERROR_msg_ID;
		CALL HBC_Common.GetErrorContext(InputExceptionList,Environment.Exception);
		
		SET pException.ErrorType    = Environment.Exception.ErrorTpe;
		SET pException.Text   		= Environment.Exception.ErrorDes;
		SET pException.Number 		= Environment.Exception.ErrorCde;
		
		-- constructing the exception output message		
		DECLARE rOutput REFERENCE TO OutputRoot.XMLNSC.ns3:RetrieveByIDandChainFault;
		CREATE FIELD OutputRoot.XMLNSC.ns3:RetrieveByIDandChainFault AS rOutput;
		
		IF pException.ErrorType = 'UserException' THEN
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 = Environment.variables.ERROR_msg_ID;
		    SET errorText 	 	 = Environment.variables.ERROR_msg_MSG;
		    SET errorDetails 	 = Environment.variables.ERROR_msg_MSG;
		    
		    SET rOutput.ns5:code = errorCodeID;
		    SET rOutput.ns5:message = errorText;
		    SET rOutput.ns5:severity = 'low';
		    
		-- system/sockettimeout error    
		ELSE   
			DECLARE errorCodeID INTEGER;
			DECLARE errorText CHARACTER;
			DECLARE errorDetails CHARACTER;
		    
		    SET errorCodeID  	 =  pException.Number;
		    SET errorText 	 	 =  pException.Text;
		    SET errorDetails 	 =  pException.Text;
		    
		    SET rOutput.ns5:code = errorCodeID;
		    SET rOutput.ns5:message = errorText;
		    SET rOutput.ns5:severity = 'high';
		    
		END IF;	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;